Script started on 2021-04-23 13:30:58-04:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="138" LINES="31"]
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ ls
npmain_smallsh.c              np_prj_script_timing_5.log  npproc_line.c              np_project_script_5.txt  npruncommand.c  smallsh.h
np_prj_script_timing_1.log    np_prj_script_timing_6.log  np_project_script_1.txt    np_project_script_6.txt  [0m[01;32mnpshell[0m
np_prj_script_timing_2_3.log  np_prj_script_timing_7.log  np_project_script_2_3.txt  np_project_script_7.txt  npuserin.c
np_prj_script_timing_4.log    np_prj_script_timing.log    np_project_script_4.txt    np_project_script.txt    [01;32mresult.txt[0m
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ cat npmain_smallsh.c 
// Neel Patel
// 110031678
#include "smallsh.h"
#include<unistd.h>
#include<string.h>



char buffer[256];
char *prompt;



int userin(char *p);
void procline(void);

int main()
{
	prompt = strcat(getcwd(buffer,sizeof(buffer)), "$");
	while (userin(prompt) != EOF)
		procline();
}

]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ ls
npmain_smallsh.c              np_prj_script_timing_5.log  npproc_line.c              np_project_script_5.txt  npruncommand.c  smallsh.h
np_prj_script_timing_1.log    np_prj_script_timing_6.log  np_project_script_1.txt    np_project_script_6.txt  [0m[01;32mnpshell[0m
np_prj_script_timing_2_3.log  np_prj_script_timing_7.log  np_project_script_2_3.txt  np_project_script_7.txt  npuserin.c
np_prj_script_timing_4.log    np_prj_script_timing.log    np_project_script_4.txt    np_project_script.txt    [01;32mresult.txt[0m
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ cat npruncommand.c 
// Neel Patel
// 110031678
#include "smallsh.h"
#include <unistd.h>
#include <stdlib.h>
#include<string.h>
#include<errno.h>
#include <stdbool.h>
#include<fcntl.h>


// Method for changing directory
void change_directory(const char *argv);
// Method for terminating shell program
void terminate_shell();
//Method for getting total count of command along with arguments entered by the user 
void buffer_count(int c);
// Calculator method
void calculator();
// Method to be used by calculator method
void childFunction(char *line);

// For storing count of total elements in buffer
int count;

// Boolean flag indicating wthether command contains pipe "|" symbol or not.
bool contain_pipe_symbol = false;
// For storing two commands in two variables after being splitted by pipe "|" symbol.
char **cmd1=NULL,**cmd2=NULL;
// For storing two commands in two variables after being splitted by redirect ">" symbol.
char **cmd3=NULL,**cmd4=NULL;
// Boolean flag indicating wthether command contains std output redirect '>' symbol or not.
bool contain_std_output_redirect_symbol = false;
// Boolean flag indicating wthether command entered is calculator or false.
bool is_command_calculator = false;

int p[2];






int runcommand(char **cline, int where)
{
	pid_t pid;
	int status;
	char buffer[MAXBUF];
	int file_descriptor;


	// Code for checking if command entered is cd or not
	// If command entered is cd then check if any argument is passed or not
	if(strcmp(cline[0],"cd") == 0) {
		if(cline[1] == 0){
			change_directory(NULL);
		}
		else { 
			change_directory(cline[1]);
		}
	}

	else {
		// Code for creating a one continous string from words in cline variable.
		for(int i=0;i<count;i++) {
			strcat(buffer, " ");
			strcat(buffer,cline[i]);
		}
		// Code for checking command contains pipe "|" symbol or not.
		if(strstr(buffer,"|") != NULL ) {
			contain_pipe_symbol = true;
			// Code for splitting commands into two parts i.e. before pipe '|' and after pipe '|'
			char *arg1 = strtok(buffer,"|");
			char *arg2 = strtok(NULL,"|");		
			//Split arg1 into token based on white space
			char *temp1   = strtok (arg1, " ");
			// Here cmd1 is created dynamically based on tokens generated.
			int p = 0;
			while (temp1) {
				cmd1 = realloc(cmd1, sizeof (char*) * ++p);
				if (cmd1 == NULL)
					exit (-1); /* memory allocation failed */
				cmd1[p-1] = temp1;
				temp1 = strtok (NULL, " ");
			}
			//One more element NULL in cmd1 added i.e. which is required by execvp function
			cmd1 = realloc(cmd1, sizeof (char*) * (p+1));
			cmd1[p] = 0;
			//Split arg2 into token based on white space
			char *temp2 = strtok(arg2, " ");
			// Here cmd2 is created dynamically based on tokens generated.
			int j = 0;
			while (temp2) {
				cmd2 = realloc (cmd2, sizeof (char*) * ++j);
				if (cmd2 == NULL)
					exit (-1); /* memory allocation failed */
				cmd2[j-1] = temp2;
				temp2 = strtok (NULL, " ");
			}
			//One more element NULL in cmd2 added i.e. which is required by execvp function
			cmd2 = realloc (cmd2, sizeof (char*) * (j+1));
			cmd2[j] = 0;
		}


		// Code for checking if command entered is exit or quit
		if(strcmp(cline[0],"exit") == 0 || strcmp(cline[0],"quit") == 0) {
			terminate_shell();
		}


		//Code for checking if command contains std output redirect '>' symbol or not
		if(strstr(buffer,">") != NULL) {
			contain_std_output_redirect_symbol = true;
			// Code for splitting commands into two parts i.e. before redirect '>' and after redirect '>'
			char *arg1 = strtok(buffer,">");
			char *arg2 = strtok(NULL,">");		
			//Split arg1 into token based on white space
			char *temp1   = strtok (arg1, " ");
			// Here cmd3 is created dynamically based on tokens generated.
			int l = 0;
			while (temp1) {
				cmd3 = realloc (cmd3, sizeof (char*) * ++l);
				if (cmd3 == NULL)
					exit (-1); /* memory allocation failed */
				cmd3[l-1] = temp1;
				temp1 = strtok (NULL, " ");
			}
			//One more element NULL in cmd3 added i.e. which is required by execvp function
			cmd3 = realloc (cmd3, sizeof (char*) * (l+1));
			cmd3[l] = 0;
			//Split arg2 into token based on white space
			char *temp2   = strtok(arg2, " ");
			// Here cmd4 is created dynamically based on tokens generated.
			int k = 0;
			while (temp2) {
				cmd4 = realloc (cmd4, sizeof (char*) * ++k);
				if (cmd4 == NULL)
					exit (-1); /* memory allocation failed */
				cmd4[k-1] = temp2;
				temp2 = strtok (NULL, " ");
			}
		}

		if(strcmp(cline[0],"calculator") == 0) {
			is_command_calculator = true;
		}
	
	
		//Execute command entered by the user
		switch (pid = fork()) {
			case -1:
				perror("smallsh");
				return (-1);
			case 0:
				if(contain_pipe_symbol == true) {
					int pid1,status;
					if(pipe(p) == -1) {
						perror("Unable to create pipe \n");
					}
					pid1 = fork();
					if(pid1 == -1) {
						perror("Error while creating process \n");
					}
					// One new process created for executing one part of command before pipe
					// "|" symbol
					if(pid1 == 0){
						// standard output redirected to pipe, so another process can read from it.
						dup2(p[1], 1);
						close(p[0]);
						close(p[1]);
						execvp(cmd1[0],cmd1);
						perror(*cmd1);
						exit(3);
					}
					// other process will be executing another part of command after pipe
					// "|" symbol
					if(pid1 > 0) {
						waitpid(pid1,&status,0);
						dup2(p[0], 0);
						close(p[0]);
						close(p[1]);
						execvp(cmd2[0],cmd2);
						perror(*cmd2);
						free(cmd1);
						free(cmd2);
						memset(buffer,0,MAXBUF);
						exit(2);
					}
				}
				else if(contain_pipe_symbol == false && contain_std_output_redirect_symbol == false && is_command_calculator == false) { 
					execvp(cline[0], cline);
					perror(*cline);
					exit(1);
				}
				else if(contain_std_output_redirect_symbol == true) {
					int file_descriptor = open(cmd4[0],O_WRONLY|O_CREAT|O_TRUNC,0777);
					if(file_descriptor == -1) {
						perror("Error while opening file");
					}
					dup2(file_descriptor,1);
					execvp(cmd3[0],cmd3);
					close(file_descriptor);
					free(cmd3);
					free(cmd4);
					memset(buffer,0,MAXBUF);
					exit(3);
				} 
				else if(is_command_calculator == true) {
					calculator();
					exit(4);
				}
		}
	}
	

	
	
	
		
	
	


	//code for parents
	if (where == BACKGROUND)
	{
		printf("[process id %d]\n", pid);
		return (0);
	}
	
	if (waitpid(pid, &status, 0) == -1)
		return (-1);
	else{
		contain_pipe_symbol = false;
		contain_std_output_redirect_symbol = false;
		is_command_calculator = false;
		memset(buffer,0,MAXBUF);
		return (status);
	}
}

void change_directory(const char *argv) {
	int status;
	if(argv == NULL){
		status = chdir(getenv("HOME"));
	} else {
		status = chdir(argv);
	}
	
	if(status == -1) {
		switch (errno)
		{
			case EACCES:
				perror("Permission denied");
				break;
			case EIO:
				perror("Input error");
				break;
			case ENAMETOOLONG:
				perror("Specified path is too long");
				break;
			case ENOTDIR:
				perror("The directory specified in path does not exist");
				break;
			case ENOENT: 
				perror("No such file or directory");
				break; 
		}
	}
	
	
}

void terminate_shell() {
	exit(0);
}

void buffer_count(int c) {
	count = c;
}

void childFunction(char *line)
{
    int n1,n2,operand1, operand2,sum,difference,product;
    char operator;
    float quotient;
    char buffer[500];
     
    write(1,"I am a child working for my parent\n",36); 
    n1 = sscanf(line, "%d %c %d", &operand1, &operator, &operand2);  
     
    sleep(1);
     
    if (n1 < 3)    
        exit(50);
     
    if (operator == '/' && operand2 == 0)   
        exit(100);
     
    switch (operator) 
    {
        
             
        case '-':
            difference = operand1-operand2;
            n2=sprintf(buffer,"\n>%d %c %d = %d\n", operand1, operator, operand2,difference);
            write(1,buffer,n2);
            break;
        case '+':
            sum = operand1+operand2;
            n2=sprintf(buffer,"\n>%d %c %d = %d\n", operand1, operator, operand2, sum);
            write(1,buffer,n2);
            break;
             
        case '/':
            quotient = operand1 / operand2;
            n2=sprintf(buffer,"\n>%d %c %d = %f\n", operand1, operator, operand2, quotient);
            write(1,buffer,n2);
            break;
             
        case '*':
            product = operand1 * operand2;
            n2=sprintf(buffer,"\n>%d %c %d = %d\n", operand1, operator, operand2, product);
            write(1,buffer,n2);
            break;
             
        default:
            exit(200);
            break;
    }
    exit(0);
     
}

void calculator() {
	    char str[500];
    int status;
    pid_t pid;
    write(1,"This program makes simple arithmetics\n",39);
     
    while(1)    
    {
        write(1,"Enter an arithmetic statement(eg 34+132)>\n",43);
        
        
       read(0,str,15);
         
        pid = fork();  
         
        if (pid == -1)  
        {
            perror("Fork error\n");
            exit(0);
        }
         
        else if (pid == 0)    
            childFunction(str);
         
        else
        {
            if (pid > 0)  
            {
                if(strstr(str,"exit") != NULL) {
                    exit(1);
                }
                write(1,"\nCreated a child to make your operation, waiting\n",50); 
                wait(&status);  
                 
                if (WEXITSTATUS(status) == 50)  
                    write(1,"Wrong Statement\n",17);
                 
                else if (WEXITSTATUS(status) == 100)    
                    write(1,"Division by zero\n",18);
                 
                else
                    if (WEXITSTATUS(status) == 200) 
                        write(1,"Wrong operator\n",16);
            }
        }
         
    }
}


]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ ls
npmain_smallsh.c              np_prj_script_timing_5.log  npproc_line.c              np_project_script_5.txt  npruncommand.c  smallsh.h
np_prj_script_timing_1.log    np_prj_script_timing_6.log  np_project_script_1.txt    np_project_script_6.txt  [0m[01;32mnpshell[0m
np_prj_script_timing_2_3.log  np_prj_script_timing_7.log  np_project_script_2_3.txt  np_project_script_7.txt  npuserin.c
np_prj_script_timing_4.log    np_prj_script_timing.log    np_project_script_4.txt    np_project_script.txt    [01;32mresult.txt[0m
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ cat npproc_line.c 
// Neel Patel
// 110031678
#include "smallsh.h"
#include <string.h>
#include <stdlib.h>

int gettok(char **outptr);
int runcommand(char **cline, int where);
void buffer_count(int c);


void procline(void) 
{
	char *arg[MAXARG + 1]; 
	int toktype; 
	int narg; 
	int type; 

	narg = 0;

	for (;;) 
	{
		
	   switch (toktype = gettok(&arg[narg])) {
		case ARG:
			if (narg < MAXARG) {
				narg++;
			}
			buffer_count(narg);
			break;
		case EOL:
		case SEMICOLON:
		case AMPERSAND:
			if (toktype == AMPERSAND)
				type = BACKGROUND;
			else
				type = FOREGROUND;
			if (narg != 0)
			{
				arg[narg] = NULL;
				runcommand(arg, type);
			}
			if (toktype == EOL)
				return;
			narg = 0;
			break;
	  }
	  
	}
}
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ ls
npmain_smallsh.c              np_prj_script_timing_5.log  npproc_line.c              np_project_script_5.txt  npruncommand.c  smallsh.h
np_prj_script_timing_1.log    np_prj_script_timing_6.log  np_project_script_1.txt    np_project_script_6.txt  [0m[01;32mnpshell[0m
np_prj_script_timing_2_3.log  np_prj_script_timing_7.log  np_project_script_2_3.txt  np_project_script_7.txt  npuserin.c
np_prj_script_timing_4.log    np_prj_script_timing.log    np_project_script_4.txt    np_project_script.txt    [01;32mresult.txt[0m
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ cat npuserin.c 
// Neel Patel
// 110031678
#include "smallsh.h"
#include<unistd.h>
#include<string.h>
#include<signal.h>


//Signal handler for handling alarm signal
void signalHandler() {
	printf("\nPress Enter key to continue now! and type command now\n");
}


// command arg1 arg2 arg3
static char inpbuf[MAXBUF], tokbuf[2 * MAXBUF],
*ptr = inpbuf, *tok = tokbuf;






int inarg(char c);

int userin(char *p)
{
	

	
	
	//Set the handler for alarm
	signal(SIGALRM,signalHandler);
	int c, count;
	ptr = inpbuf;
	tok = tokbuf;

	
	
	
	//Alarm called once
	alarm(10);

    //Code for checking enter key pressed and alarm rescheduled. ASCII Code for enter key  is '10'.
	if(c == 10) {
		alarm(10);
	}

	
	
	//Code for getting current working directory whenever prompt is printed on the screen.
	char buffer[256];
	p = strcat(getcwd(buffer,sizeof(buffer)), "$");
	printf("%s", p);

	count = 0;
	while (1)
	{
		if ((c = getchar()) == EOF)
			return(EOF);
		if (count < MAXBUF)
			inpbuf[count++] = c;
		if (c == '\n' && count < MAXBUF)
		{
			inpbuf[count] = '\0';
			return count;
		}
		
		if (c == '\n') 
		{
			printf("smallsh: input line too long\n");
			count = 0;
			printf("%s ", p);
		}
	}

	// printf("inpbuf=%s\n", inpbuf);
}

int gettok(char **outptr)
{
	int type;
	
	*outptr = tok;
	
	while (*ptr == ' ' || *ptr == '\t')
		ptr++;
	
	*tok++ = *ptr;
	
	switch (*ptr++) {
	case '\n':
		type = EOL;
		break;
	case '&':
		type = AMPERSAND;
		break;
	case ';':
		type = SEMICOLON;
		break;
	default:
		type = ARG;
		
		while (inarg(*ptr))
			*tok++ = *ptr++;
	}
	*tok++ = '\0';
	return type;
}

//****************************************************************************************
static char special[] = { ' ', '\t', '&', ';', '\n', '\0' };
int inarg(char c)
{
	char *wrk;
	for (wrk = special; *wrk; wrk++)
	{
		if (c == *wrk)
			return (0);
	}
	
	return (1);
}




]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ ls
npmain_smallsh.c              np_prj_script_timing_5.log  npproc_line.c              np_project_script_5.txt  npruncommand.c  smallsh.h
np_prj_script_timing_1.log    np_prj_script_timing_6.log  np_project_script_1.txt    np_project_script_6.txt  [0m[01;32mnpshell[0m
np_prj_script_timing_2_3.log  np_prj_script_timing_7.log  np_project_script_2_3.txt  np_project_script_7.txt  npuserin.c
np_prj_script_timing_4.log    np_prj_script_timing.log    np_project_script_4.txt    np_project_script.txt    [01;32mresult.txt[0m
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ cat smallsh.h 
// Neel Patel
// 110031678
//*****************************************************************
#include <sys/wait.h>
#include <stdio.h>

//#include <sys/wait.h>

#define EOL 1 
#define ARG 2 

#define AMPERSAND 3 
#define SEMICOLON 4 
#define MAXARG 512 
#define MAXBUF 512 

#define FOREGROUND 0 
#define BACKGROUND 1
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ cc *.c -o npshell
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ ./npc[Kshell
/home/patel2n1/Advanced_System_Programming/Linux_Shell$clear
[H[2J[3J/home/patel2n1/Advanced_System_Programming/Linux_Shell$cd
/home/patel2n1$c ls -l
total 33069
-rw-r--r--  1 patel2n1 temp    11129 Mar 24 10:14 '03.01 Loading csv files into dataframes.ipynb'
-rw-r--r--  1 patel2n1 temp     6339 Mar 24 10:17 '03.02 Reading JSON Files.ipynb'
-rw-r--r--  1 patel2n1 temp    13265 Mar 24 10:20 '03.03 Basic Dataframe Operations.ipynb'
-rw-r--r--  1 patel2n1 temp     6645 Mar 24 10:24 '03.04 Filtering using Dataframe API.ipynb'
-rw-r--r--  1 patel2n1 temp     7435 Mar 24 10:27 '03.05 Aggregating using Dataframe API.ipynb'
-rw-r--r--  1 patel2n1 temp     7358 Mar 24 10:30 '03.06 Sampling using Dataframe API.ipynb'
-rw-r--r--  1 patel2n1 temp     4765 Mar 24 10:32 '03.07 Saving Data from Dataframes.ipynb'
-rw-r--r--  1 patel2n1 temp     7642 Mar 24 10:34 '04.01 Querying Dataframes with SQL.ipynb'
-rw-r--r--  1 patel2n1 temp    10572 Mar 24 10:35 '04.02 Filtering Dataframes with SQL.ipynb'
-rw-r--r--  1 patel2n1 temp    12090 Mar 24 10:38 '04.03 Aggregating Dataframes with SQL.ipynb'
-rw-r--r--  1 patel2n1 temp     9201 Mar 24 10:40 '04.04 Joining Dataframes with SQL.ipynb'
-rw-r--r--  1 patel2n1 temp     3821 Mar 24 10:43 '04.05 De-duplicating.ipynb'
-rw-r--r--  1 patel2n1 temp     9227 Mar 23 21:52 '04.06 Working with NAs.ipynb'
-rw-r--r--  1 patel2n1 temp     3666 Mar 23 21:52 '05.01 Exploratory Analysis.ipynb'
-rw-r--r--  1 patel2n1 temp    12728 Mar 24 11:27 '05.02 Timeseries Analysis .ipynb'
-rw-r--r--  1 patel2n1 temp     2622 Mar 23 21:52 '05.03 Machine Learning - Clustering.ipynb'
-rw-r--r--  1 patel2n1 temp     2568 Mar 23 21:51 '05.04 Machine Learning - Linear Regression.ipynb'
drwxr-xr-x 10 patel2n1 temp       15 Apr 22 13:21  Advanced_System_Programming
drwxr-xr-x  3 patel2n1 temp        8 Sep 25  2020  COMP8117
-rw-r--r--  1 patel2n1 temp       12 Feb 23 10:05  counting.bin
drwxr-xr-x  2 patel2n1 temp       20 Apr 22 08:32  Desktop
drwxr-xr-x  2 patel2n1 temp       12 Mar 24 10:31  df1.csv
drwxr-xr-x  2 patel2n1 temp       12 Mar 24 10:31  df1.json
drwxr-xr-x  3 patel2n1 temp        3 Feb  5 02:20  Documents
drwxr-xr-x  2 patel2n1 temp       13 Mar 22 10:51  Downloads
-rw-------  1 patel2n1 temp       59 Feb 23 09:53  example.txt
-rw-r--r--  1 patel2n1 temp 14890036 Mar 23 21:50  location_temp.csv
drwxr-xr-x  2 patel2n1 temp       12 Mar 24 10:13  location_temp.json
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020  Music
-rwxr-xr-x  1 patel2n1 temp    17000 Feb 23 10:05  npq1
-rw-------  1 patel2n1 temp      717 Feb 23 10:03  npq1.c
-rw-r--r--  1 patel2n1 temp     2706 Feb 23 10:05  npq1s.txt
-rw-r--r--  1 patel2n1 temp      923 Feb 23 10:05  npq1t.log
-rw-r--r--  1 patel2n1 temp     2448 Feb 23 10:06  patel2n1.zip
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020  Pictures
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020  Public
-rwxr-xr-x  1 patel2n1 temp     3322 Apr 22 18:07  result1.txt
-rwxr-xr-x  1 patel2n1 temp     1022 Apr 22 18:08  result2.txt
-rwxr-xr-x  1 patel2n1 temp     3260 Apr 22 17:09  result.txt
-rw-r--r--  1 patel2n1 temp      772 Mar 23 21:50  server_name.csv
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020  Templates
-rw-r--r--  1 patel2n1 temp       72 Mar 24 11:03  Untitled1.ipynb
-rw-r--r--  1 patel2n1 temp     2873 Mar 24 11:49  Untitled2.ipynb
-rw-r--r--  1 patel2n1 temp       72 Mar 23 21:54  Untitled.ipynb
-rw-r--r--  1 patel2n1 temp 18504832 Mar 23 21:50  utilization.csv
drwxr-xr-x  2 patel2n1 temp       14 Mar 24 10:14  utilization.json
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020  Videos
/home/patel2n1$clear
[H[2J[3J/home/patel2n1$cd /
/$cd /root
Permission denied: Permission denied
/$
Press Enter key to continue now! and type command now

/$cd
/home/patel2n1$clear
[H[2J[3J/home/patel2n1$l ps -e | gr
Press Enter key to continue now! and type command now
ep shell
31307 pts/0    00:00:00 npshell
31538 pts/0    00:00:00 npshell
/home/patel2n1$ps -e | grep shell
31307 pts/0    00:00:00 npshell
31621 pts/0    00:00:00 npshell
/home/patel2n1$ls -lt > r.txt
/home/patel2n1$cat r.txt
total 33069
-rwxr-xr-x  1 patel2n1 temp        0 Apr 23 13:32 r.txt
-rwxr-xr-x  1 patel2n1 temp     1022 Apr 22 18:08 result2.txt
-rwxr-xr-x  1 patel2n1 temp     3322 Apr 22 18:07 result1.txt
-rwxr-xr-x  1 patel2n1 temp     3260 Apr 22 17:09 result.txt
drwxr-xr-x 10 patel2n1 temp       15 Apr 22 13:21 Advanced_System_Programming
drwxr-xr-x  2 patel2n1 temp       20 Apr 22 08:32 Desktop
-rw-r--r--  1 patel2n1 temp     2873 Mar 24 11:49 Untitled2.ipynb
-rw-r--r--  1 patel2n1 temp    12728 Mar 24 11:27 05.02 Timeseries Analysis .ipynb
-rw-r--r--  1 patel2n1 temp       72 Mar 24 11:03 Untitled1.ipynb
-rw-r--r--  1 patel2n1 temp     3821 Mar 24 10:43 04.05 De-duplicating.ipynb
-rw-r--r--  1 patel2n1 temp     9201 Mar 24 10:40 04.04 Joining Dataframes with SQL.ipynb
-rw-r--r--  1 patel2n1 temp    12090 Mar 24 10:38 04.03 Aggregating Dataframes with SQL.ipynb
-rw-r--r--  1 patel2n1 temp    10572 Mar 24 10:35 04.02 Filtering Dataframes with SQL.ipynb
-rw-r--r--  1 patel2n1 temp     7642 Mar 24 10:34 04.01 Querying Dataframes with SQL.ipynb
-rw-r--r--  1 patel2n1 temp     4765 Mar 24 10:32 03.07 Saving Data from Dataframes.ipynb
drwxr-xr-x  2 patel2n1 temp       12 Mar 24 10:31 df1.json
drwxr-xr-x  2 patel2n1 temp       12 Mar 24 10:31 df1.csv
-rw-r--r--  1 patel2n1 temp     7358 Mar 24 10:30 03.06 Sampling using Dataframe API.ipynb
-rw-r--r--  1 patel2n1 temp     7435 Mar 24 10:27 03.05 Aggregating using Dataframe API.ipynb
-rw-r--r--  1 patel2n1 temp     6645 Mar 24 10:24 03.04 Filtering using Dataframe API.ipynb
-rw-r--r--  1 patel2n1 temp    13265 Mar 24 10:20 03.03 Basic Dataframe Operations.ipynb
-rw-r--r--  1 patel2n1 temp     6339 Mar 24 10:17 03.02 Reading JSON Files.ipynb
-rw-r--r--  1 patel2n1 temp    11129 Mar 24 10:14 03.01 Loading csv files into dataframes.ipynb
drwxr-xr-x  2 patel2n1 temp       14 Mar 24 10:14 utilization.json
drwxr-xr-x  2 patel2n1 temp       12 Mar 24 10:13 location_temp.json
-rw-r--r--  1 patel2n1 temp       72 Mar 23 21:54 Untitled.ipynb
-rw-r--r--  1 patel2n1 temp     9227 Mar 23 21:52 04.06 Working with NAs.ipynb
-rw-r--r--  1 patel2n1 temp     3666 Mar 23 21:52 05.01 Exploratory Analysis.ipynb
-rw-r--r--  1 patel2n1 temp     2622 Mar 23 21:52 05.03 Machine Learning - Clustering.ipynb
-rw-r--r--  1 patel2n1 temp     2568 Mar 23 21:51 05.04 Machine Learning - Linear Regression.ipynb
-rw-r--r--  1 patel2n1 temp 18504832 Mar 23 21:50 utilization.csv
-rw-r--r--  1 patel2n1 temp 14890036 Mar 23 21:50 location_temp.csv
-rw-r--r--  1 patel2n1 temp      772 Mar 23 21:50 server_name.csv
drwxr-xr-x  2 patel2n1 temp       13 Mar 22 10:51 Downloads
-rw-r--r--  1 patel2n1 temp     2448 Feb 23 10:06 patel2n1.zip
-rw-r--r--  1 patel2n1 temp     2706 Feb 23 10:05 npq1s.txt
-rw-r--r--  1 patel2n1 temp      923 Feb 23 10:05 npq1t.log
-rw-r--r--  1 patel2n1 temp       12 Feb 23 10:05 counting.bin
-rwxr-xr-x  1 patel2n1 temp    17000 Feb 23 10:05 npq1
-rw-------  1 patel2n1 temp      717 Feb 23 10:03 npq1.c
-rw-------  1 patel2n1 temp       59 Feb 23 09:53 example.txt
drwxr-xr-x  3 patel2n1 temp        3 Feb  5 02:20 Documents
drwxr-xr-x  3 patel2n1 temp        8 Sep 25  2020 COMP8117
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020 Videos
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020 Pictures
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020 Music
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020 Public
drwxr-xr-x  2 patel2n1 temp        2 Sep 21  2020 Templates
/home/patel2n1$clear
[H[2J[3J/home/patel2n1$calculator
This program makes simple arithmetics
 Enter an arithmetic statement(eg 34+132)>
 132 / 34

Created a child to make your operation, waiting
 I am a child working for my parent
 
Press Enter key to continue now! and type command now

>132 / 34 = 3.000000
Enter an arithmetic statement(eg 34+132)>
 132 - 34

Created a child to make your operation, waiting
 I am a child working for my parent
 
>132 - 34 = 98
Enter an arithmetic statement(eg 34+132)>
 exit
I am a child working for my parent
 /home/patel2n1$quit
]0;patel2n1@charlie: ~/Advanced_System_Programming/Linux_Shell[01;32mpatel2n1@charlie[00m:[01;34m~/Advanced_System_Programming/Linux_Shell[00m$ exit

Script done on 2021-04-23 13:33:23-04:00 [COMMAND_EXIT_CODE="0"]
